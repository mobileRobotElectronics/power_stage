/**
 * This is an autogenerated netlist code from CircuitVerse. Verilog Code can be
 * tested on https://www.edaplayground.com/ using Icarus Verilog 0.9.7. This is an
 * experimental module and some manual changes make need to be done in order for
 * this to work.
 *
 * If you have any ideas/suggestions or bug fixes, raise an issue
 * on https://github.com/CircuitVerse/CircuitVerse/issues/new/choose
 */

/*
  Element Usage Report
    Input - 5 times
    XorGate - 4 times
    Demultiplexer - 2 times
    OrGate - 6 times
    Output - 6 times
    Splitter - 1 times
    ConstantVal - 1 times
*/

/*
  Usage Instructions and Tips
    Labels - Ensure unique label names and avoid using verilog keywords
    Warnings - Connect all optional inputs to remove warnings
*/

// Sample Testbench Code - Uncomment to use

/*
module TestBench();

  reg Hall_2, Hall_1, Hall_0, Direction, PWM;

  wire Y_H, G_H, B_H, Y_L, G_L, B_L;

  Main DUT0(Y_H, G_H, B_H, Y_L, G_L, B_L, Hall_2, Hall_1, Hall_0, Direction, PWM);

  initial begin
    Hall_2 = 0;
    Hall_1 = 0;
    Hall_0 = 0;
    Direction = 0;
    PWM = 0;

    #15
    $display("Y_H = %b", Y_H);
    $display("G_H = %b", G_H);
    $display("B_H = %b", B_H);
    $display("Y_L = %b", Y_L);
    $display("G_L = %b", G_L);
    $display("B_L = %b", B_L);

    #10
    $display("Y_H = %b", Y_H);
    $display("G_H = %b", G_H);
    $display("B_H = %b", B_H);
    $display("Y_L = %b", Y_L);
    $display("G_L = %b", G_L);
    $display("B_L = %b", B_L);

    $finish;

  end
endmodule

*/

module top_commutation_multiplex
(
  LEDR_N, LEDG_N, LED2, LED3, LED4, LED5,
  P1A1, P1A2, P1A3, P1A7, P1A8, P1A9,
  P1B1, P1B2, P1B3, P1B7, P1B8
);
  output P1A1, P1A2, P1A3; //Y_H,  G_H,  B_H;
  output P1A7, P1A8, P1A9; //Y_L,  G_L,  B_L;
  output LEDR_N, LEDG_N, LED2, LED3, LED4, LED5;
  input  P1B1, P1B2, P1B3; //Hall_2, Hall_1, Hall_0;
  input  P1B7;             //Direction;
  input  P1B8;             //PWM;

  wire PWM_Inverter_out;
  wire PWM_Invert_Multiplexer_out_0, PWM_Invert_Multiplexer_out_1, PWM_Invert_Multiplexer_out_2, PWM_Invert_Multiplexer_out_3, PWM_Invert_Multiplexer_out_4, PWM_Invert_Multiplexer_out_5, PWM_Invert_Multiplexer_out_6, PWM_Invert_Multiplexer_out_7;
  wire or_5_out, or_4_out, or_3_out, or_2_out, or_1_out, or_0_out;
  wire PWM_Multiplexer_out_1, PWM_Multiplexer_out_2, PWM_Multiplexer_out_3, PWM_Multiplexer_out_4, PWM_Multiplexer_out_5, PWM_Multiplexer_out_6;
  wire Adress_Inverter_2_out, Adress_Inverter_1_out, Adress_Inverter_0_out;
  wire const_0;
  wire [2:0] Splitter_0_cmb;


  //rename inputs and outputs to circuit's input output names
  wire Y_H, G_H, B_H, Y_L, G_L, B_L;
  wire Hall_2, Hall_1, Hall_0, Direction, PWM;

  assign P1A1 = Y_H;
  assign P1A2 = G_H;
  assign P1A3 = B_H;
  assign P1A7 = Y_L;
  assign P1A8 = G_L;
  assign P1A9 = B_L;

  assign Hall_2 = P1B1;
  assign Hall_1 = P1B2;
  assign Hall_0 = P1B3;
  assign Direction = P1B7;
  assign PWM = P1B8;

  assign PWM_Inverter_out = const_0 ^ PWM;

  //indicate output using leds (debug LEDs)
  assign LEDR_N = !Y_H;
  assign LEDG_N = !G_H;

  assign LED2 = G_H;
  assign LED3 = B_H;

  assign LED4 = G_L;
  assign LED5 = B_L;

  

  Demultiplexer8 PWM_Invert_Multiplexer
  (
    PWM_Invert_Multiplexer_out_7, PWM_Invert_Multiplexer_out_1, PWM_Invert_Multiplexer_out_2, PWM_Invert_Multiplexer_out_3, PWM_Invert_Multiplexer_out_4, PWM_Invert_Multiplexer_out_5, PWM_Invert_Multiplexer_out_6, PWM_Invert_Multiplexer_out_7,
    PWM_Inverter_out,
    Splitter_0_cmb
  );
  assign or_2_out = PWM_Multiplexer_out_1 | PWM_Multiplexer_out_5 | PWM_Invert_Multiplexer_out_2 | PWM_Invert_Multiplexer_out_6;
  assign B_L = or_2_out;
  assign or_1_out = PWM_Multiplexer_out_2 | PWM_Multiplexer_out_3 | PWM_Invert_Multiplexer_out_4 | PWM_Invert_Multiplexer_out_5;
  assign G_L = or_1_out;
  assign or_0_out = PWM_Multiplexer_out_4 | PWM_Multiplexer_out_6 | PWM_Invert_Multiplexer_out_1 | PWM_Invert_Multiplexer_out_3;
  assign Y_L = or_0_out;

  Demultiplexer8 PWM_Multiplexer
  (
    PWM_Invert_Multiplexer_out_7, PWM_Multiplexer_out_1, PWM_Multiplexer_out_2, PWM_Multiplexer_out_3, PWM_Multiplexer_out_4, PWM_Multiplexer_out_5, PWM_Multiplexer_out_6, PWM_Invert_Multiplexer_out_7,
    PWM,
    Splitter_0_cmb
  );

  assign or_5_out = PWM_Multiplexer_out_2 | PWM_Multiplexer_out_6;
  assign B_H = or_5_out;
  assign or_4_out = PWM_Multiplexer_out_4 | PWM_Multiplexer_out_5;
  assign G_H = or_4_out;
  assign or_3_out = PWM_Multiplexer_out_1 | PWM_Multiplexer_out_3;
  assign Y_H = or_3_out;
  assign Adress_Inverter_2_out = Direction ^ Hall_2;
  assign Splitter_0_cmb = {Adress_Inverter_2_out,Adress_Inverter_1_out,Adress_Inverter_0_out};
  assign Adress_Inverter_1_out = Direction ^ Hall_1;
  assign Adress_Inverter_0_out = Direction ^ Hall_0;
  assign const_0 = 1'b1;
endmodule

module Demultiplexer8
(
  out0, out1, out2, out3, out4, out5, out6, out7,
  in,
  sel
);

  parameter WIDTH = 1;
  output reg [WIDTH-1:0] out0, out1, out2, out3, out4, out5, out6, out7;
  input [WIDTH-1:0] in;
  input [2:0] sel;
  
  always @ (*) begin
    out0 = 0;
    out1 = 0;
    out2 = 0;
    out3 = 0;
    out4 = 0;
    out5 = 0;
    out6 = 0;
    out7 = 0;
    case (sel)
      0 : out0 = in;
      1 : out1 = in;
      2 : out2 = in;
      3 : out3 = in;
      4 : out4 = in;
      5 : out5 = in;
      6 : out6 = in;
      7 : out7 = in;
    endcase
  end
endmodule
